#! /usr/bin/env python

PACKAGE='roboteq_driver'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#Motor Current Limit
gen.add("current_limit", double_t, 0, "Maximum Current Delivered to Motor, in Amps.", 2.3, 1.0, 5.0)

#PID Proportional Gain
gen.add("pid_kp", int_t, 0, "Proportional Gain for PID controller, scaled down by 10x", 0, 0, 200)
#PID Integral Gain
gen.add("pid_ki", int_t, 0, "Integral Gain for PID controller, scaled down by 10x", 0, 0, 200)
#PID Differential Gain
gen.add("pid_kd", int_t, 0, "Differential Gain for PID controller, scaled down by 10x", 0, 0, 200)
#PID Integral Cap
gen.add("int_cap", int_t, 0, "PID Integral Cap as percentage. Limits max level of integral factor to prevent overaccumulation of integral term", 100, 0, 100)

#Closed Loop Error Detection
err_mode = gen.enum([gen.const("Disabled", int_t, 0, "Detection Disabled"), gen.const("250ms", int_t, 1, "250ms at Error > 100"), gen.const("500ms", int_t, 2, "500ms at Error > 250"), gen.const("1000ms", int_t, 3, "1000ms at Error > 500")], "An enum to define error detection modes")
gen.add("error_detection", int_t, 0, "Parameter to set Closed Loop Error Detection Mode. 0:Disabled. 1:250ms at Error > 100. 2:500ms at Error > 250. 3:1000ms at Error > 500", 0, 0, 3, edit_method=err_mode)


#Drive Mode Variable
drive_mode = gen.enum([gen.const("Open_Loop", int_t, 0, "Open-Loop Speed Mode"), gen.const("Speed", int_t, 1, "Closed Loop Speed Mode"), gen.const("Relative_Position", int_t, 2, "Closed Loop Position Relative Mode"), gen.const("Count_Position", int_t, 3, "Closed Loop Count Position"), gen.const("Track_Position", int_t, 4, "Closed Loop Position Tracking"), gen.const("Torque", int_t, 5, "Torque Control")], "An enum to define run mode")
gen.add("control_mode", int_t, 0, "Parameter to specify controller mode", 0, 0, 5, edit_method=drive_mode)

#Over and Under Voltage Limits
gen.add("ovl", int_t, 0, "Overvoltage Limit, in Volts", 60, 20, 60)
gen.add("uvl", int_t, 0, "Undervoltage Limit, in Volts", 5, 5, 20)

gen.add("motor_accel", int_t, 0, "Motor Acceleration Rate, in .1 RPM per seconds", 20000, 0, 30000)
gen.add("motor_decel", int_t, 0, "Motor Deceleration Rate, in .1 RPM per seconds", 20000, 0, 30000)

gen.add("max_rpm", int_t, 0, "Maximum Motor RPM", 6000, 10, 10000)

pole_ct = gen.enum([gen.const("One", int_t, 1, ""), gen.const("Two", int_t, 2, ""), gen.const("Three", int_t, 3, ""), gen.const("Four", int_t, 4, ""), gen.const("Five", int_t, 5, ""), gen.const("Six", int_t, 6, ""), gen.const("Seven", int_t, 7, ""), gen.const("Eight", int_t, 8, "")], "Set Brushless Pole Count")
gen.add("pole_pairs", int_t, 0, "Toggle Brushless Pole Count", 8, 1, 8, edit_method=pole_ct)

gen.add("save_eeprom", bool_t, 0, "Toggle to save configuration to driver memory", False)

gen.add("e_stop", bool_t, 0, "Enable Emergency Stop. Controller remains disabled until Stop_Release is called", False)
gen.add("e_release", bool_t, 0, "Re-enable Controller after Emergency Stop", False)

exit(gen.generate(PACKAGE, "roboteq_driver", "Mot"))
